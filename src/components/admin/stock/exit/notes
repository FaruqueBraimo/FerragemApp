<template>
	<tr>
		<td class="text-left">
			<div class="q-pa-md">
				<q-expansion-item
					v-model="expanded"
					icon="local_grocery_store"
					label="Lista de Produtos Exportados"
					caption="Toque Para ver"
				>
					<div class="row q-pa-sm  " id="printMe">
						<div class="col text-bold text-green-7">Produto</div>

						<div class="col  text-bold text-green-7  q-pr-md">
							Quantidade
						</div>

						<div class="col  text-bold text-green-7  q-pr-md">
							subtotal
						</div>
					</div>

					<q-card v-for="(product, key) in stock.products" :key="key">
						<q-card-section>
							<div class="row ">
								<div class="col text-capitalize	">
									{{ product.name }}
								</div>

								<div class="col  q-pr-md">
									{{ product.newQtd }}
								</div>

								<div class="col  q-pr-md">
									{{ product.subtotal }},00 MT
								</div>
							</div>
						</q-card-section>
					</q-card>
				</q-expansion-item>
			</div>
		</td>

		<td>{{ sumTotals.sumMoney }}</td>

		<td>{{ stock.user.label || stock.user }}</td>

		<td class="text-center ">
			{{ stock.createdAt | dateFormat }}
		</td>

		<td class="text-center text-primary" v-if="stock.statusDelivery">
			Aceite
		</td>
		<td class="text-center text-red-5" else>Pendente</td>
		<td class="text-center ">{{ stock.createdBy }}</td>

		<td class=" text-center ">
			<div class="row justify-center items-center" style="width:100px;">
				<div class="col">
					<q-btn
						flat
						rounded
						size="sm"
						text-color="grey-7"
						icon="book"
						@click="print(stockId)"
					/>
				</div>

				<div class="col">
					<q-btn
						flat
						rounded
						size="sm"
						text-color="green"
						icon="info"
						@click="info(stock.obs)"
					/>
				</div>

				<div class="col">
					<q-btn
						flat
						rounded
						size="sm"
						text-color="red"
						icon="delete"
						@click="$emit('deletestock', stockId)"
					/>
				</div>
			</div>
		</td>
	</tr>
</template>

<script>
	import { mapActions, mapState } from 'vuex';
	import jsPDF from 'jspdf';
	import autoTable from 'jspdf-autotable';

	export default {
		name: 'stockBodyComponent',
		props: ['stock', 'stockId', 'index'],
		components: {},
		data() {
			return {
				dialog: false,
				expanded: false,
				body: [{ sub : this.sumTotals.sumMoney, data :  stock.createdAt , admin : this.stock.createdBy}],
				moreText: [
					`Este documento representa o relatório de exportação de produtos listados abaixo `,
					`do armazêm da empresa N-facilidades para ${
						this.stock.user == 'Outros/Externo'
							? ` fins externos fora da empresa/loja `
							: `o balconista ${this.stock.user.label}`
					}.`,
					`Para efeitos de confirmação de entrega, ambas partes devem assinar o documento`
				]
			};
		},
		computed: {
			...mapState('stockExit', ['stockExits']),

			sumTotals() {
				let totals = {};
				let sumMoney = 0;

				Object.keys(this.stock.products).forEach((element, key) => {
					let product = this.stock.products[element];
					sumMoney = sumMoney + product.subtotal;

					totals.sumMoney = sumMoney;
				});

				return totals;
			}
		},
		mounted() {
			// console.log(this.stock)
		},
		methods: {
			...mapActions('settings', ['setGlobalConfirm']),
			...mapActions('stock', ['updatestock']),

			print(val) {
				let product = this.stockExits[val];

				var columns = [
					{ title: 'Nome', dataKey: 'id' },
					{ title: 'Quantidade', dataKey: 'name' },
					{ title: 'Subtotal', dataKey: 'country' }
				];

				// var summary = [
				// 	{ title: 'Subtotal', dataKey: 'sub' },
				// 	{ title: 'Data Criado', dataKey: 'data' },
				// 	{ title: 'Admin', dataKey: 'admin' }
				// ];


				var rows = [];

				Object.keys(product.products).forEach((element, key) => {
					let prod = product.products[element];

					rows.push({
						id: prod.name.replace(/\w\S*/g, w =>
							w.replace(/^\w/, c => c.toUpperCase())
						),
						name: prod.newQtd,
						country:
							new Intl.NumberFormat().format(prod.subtotal) +
							' MT'
					});
				});

				var doc = new jsPDF('p', 'pt');

				doc.setFontSize(15);
				doc.text(
					20,
					40,
					`                             Relatório de Entrega de Produtos                      `
				);

				doc.line(35, 45, 550, 45);

				doc.setFont('helvetica')
					.setFontSize(12)
					.text(this.moreText, 45, 70);

				// doc.autoTable(summary, this.body, {
				// 	margin: { top: 120 },
				// 	beforePageContent: function(data) {}
				// });


				doc.autoTable(columns, rows, {
					margin: { top: 135 },
					beforePageContent: function(data) {}
				});


				

				doc.setFont('times')
					.setFontSize(11)

					.text(
						'Processado Por Computador - NFacilidades',
						20,
						doc.internal.pageSize.height - 10
					);

				doc.addPage();
				doc.text(40, 40, 'Assinatura');

				const label = `Relatorio ${
					this.stock.user == 'Outros/Externo'
						? ` de fins externos  `
						: `do balconista ${this.stock.user.label}`
				}`;
				doc.save(label + '.pdf');
			},

			info(val) {
				alert(val || 'Sem Observacão');
			}
		},
		filters: {
			dateFormat(val) {
				var months = [
					'Janeiro',
					'Fevereiro',
					'Março',
					'Abril',
					'Maio',
					'Junho',
					'Julho',
					'Agosto',
					'Setembro',
					'Outubro',
					'Novembro',
					'Dezembro'
				];
				let dateCreated = new Date(val.seconds * 1000);
				return (
					dateCreated.getDate() +
					' de ' +
					months[dateCreated.getMonth()] +
					' de ' +
					dateCreated.getFullYear()
				);
			}
		}
	};
</script>

<style scoped>
	.active-class {
		background: rgb(240, 240, 240);
	}
</style>
